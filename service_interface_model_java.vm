/*
*  Copyright (c) 2019. All right reserved
* Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
* Generated by $generator.name ( version $generator.version )
*/
package ${target.javaPackageFromFolder(${SRC})};
import ${ROOT_PKG}.entities.${entity.name};
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;

import java.util.List;

/**
 * Service Interface for managing {@link ${entity.name}}.
*  @author aek
 */
public interface ${entity.name}Service  {
   
    /**
     * create new item for domain
     *
     * @param entity entity to save.
     * @return persisted entity ${entity.name}
     */
    ${entity.name} create(${entity.name} d);

    /**
     * Update entity. Check before if existing data. If data is empty throw Exception
     *
     * @param entity domain
     * @param id of entity
     * @return ${entity.name}
     */
    ${entity.name} update(${entity.name} d);

    /**
     * get ${entity.name} by id. Can be return empty
     *
     * @param id the id of the entity.
     * @return ${entity.name}
     */
    ${entity.name} getOne(${entity.keyAttributes[0].formattedType(0)} id) ;

    /**
     * Get all entities
     *
     * @return list of entities List<${entity.name}>
     */
    List<${entity.name}> getAll();

    /**
     * Count item in entity
     *
     * @return long 
     */
    long getTotal();

    /**
     * Delete record by id
     *  
     */
    void delete(${entity.keyAttributes[0].formattedType(0)} id);

    /**
     * Find all with pagination
     *
     * @return Page<${entity.name}>  
     */
    Page<${entity.name}> findAllPaginate(Pageable pageable);

    /**
     * Find all with pagination  by criteria 
     *
     * @return Page<${entity.name}>  
     */
	Page<${entity.name}> findAllSpecification(Specification<${entity.name}> specs, Pageable pageable);

}

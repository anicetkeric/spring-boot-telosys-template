#checkId($entity)
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
## 2 variables must be defined :
## $REST_URL_ROOT ( eg "http://localhost:8080" )
## $REST_API_ROOT ( eg "/api" )
#using("REST_URL_ROOT", "REST_API_ROOT" )
#set ( $URL_ROOT = "${REST_URL_ROOT}${REST_API_ROOT}" )

##--- Build LITERAL VALUES for JAVASCRIPT LANGUAGE
$env.setLanguage('JavaScript') 
#set ( $values = $fn.buildValues($entity.attributes, 1) )
## REQUEST BODY ( JSON String ) 
#set ( $body = $values.toJSON("\n\t", "\n") )
#set ( $requestBody = $fn.backslash( $body, $QUOT) )
## REQUEST URL PARAM FOR PRIMARY KEY
#set ( $requestIdParams = '' )
#foreach ( $keyAttrib in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $requestIdParams = $requestIdParams + '/' )
#end
#set ( $requestIdParams = $requestIdParams + $fn.unquote( $values.getValue(${keyAttrib.name}) ) )
#end
## ---------- 
{
	"variables": [],
	"info": {
		"name": "REST API tests for entity $entity.name",
		"description": "PostMan tests generated by Telosys",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
## ---------- FIND ALL ENTITIES
		{
			"name": "FIND ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [

							"// Test if response code is always 200 (a list is expected, void list if nothing) ",
							"tests[\"Status code is always 200\"] = ( responseCode.code === 200 ) ;",
							"",

							"if ( responseCode.code === 200 ) {",
    							"// 200 OK (found) => Body expected in the response",
								"tests[\"Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
								"tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
    							"tests[\"Has body\"] = responseBody ;",
								"tests[\"Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": "FIND ALL with GET method"
			},
			"response": []
		},

## ---------- FIND ONE ENTITY
		{
			"name": "FIND ONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [

							"// Test if response code is 200 or 404",
							"tests[\"Status code is 200 or 404\"] = ( responseCode.code === 200 || responseCode.code === 404 ) ;",
							"",

							"if ( responseCode.code === 200 ) {",
    							"// 200 OK (found) => Body expected in the response",
								"tests[\"200 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
								"tests[\"200 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
    							"tests[\"200 => Has body\"] = responseBody ;",
								"tests[\"200 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",

							"if ( responseCode.code === 404 ) {",
    							"// 404 NOT FOUND => No body expected in the response",
								"tests[\"404 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");" ,
    							"tests[\"404 => No body\"] = ( ! responseBody ) ;",
							"}",
							"",

							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName/$requestIdParams",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "FIND ONE with GET method"
			},
			"response": []
		},

## ---------- CREATE AN ENTITY
		{
			"name": "CREATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [

							"// Test if response code is 201 or 409",
							"tests[\"Status code is 201 or 409\"] = ( responseCode.code === 201 || responseCode.code === 409 ) ;",
							"",

							"if ( responseCode.code === 201 ) {",
    							"// 201 CREATED => Body expected in the response",
								"tests[\"201 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
								"tests[\"201 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
    							"tests[\"201 => Has body\"] = responseBody ;",
								"tests[\"201 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 409 ) {",
								"// 409 CONFLICT => No body expected in the response",
								"tests[\"409 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");" ,
								"tests[\"409 => No body in response\"] = ( ! responseBody ) ;",
							"}",
							""	
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
##					"raw": "{$rawJsonRequest\n}"
					"raw": "$requestBody"
				},
				"description": "CREATE with POST method"
			},
			"response": []
		},

## ---------- UPDATE AN ENTITY
		{
			"name": "UPDATE ",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"tests[\"Status code is 200 or 404\"] = ( responseCode.code === 200 || responseCode.code === 404 ) ;",
							"",

							"// No body in the response (in any case) ",
							"tests[\"No body in response\"] = ( ! responseBody ) ;",
							"",

							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName/$requestIdParams",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
##					"raw": "{$rawJsonRequest\n}"
					"raw": "$requestBody"
				},
				"description": "UPDATE with PUT method"
			},
			"response": []
		},

## ---------- SAVE AN ENTITY
		{
			"name": "SAVE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 201",
							"tests[\"Status code is 200 or 201\"] = ( responseCode.code === 200 || responseCode.code === 201 ) ;",
							"",

    						"// 200 or 201 : Body always expected in the response",
							"tests[\"Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
    						"tests[\"Has body\"] = responseBody ;",
							"tests[\"Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"",

							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
##					"raw": "{$rawJsonRequest\n}"
					"raw": "$requestBody"
				},
				"description": "SAVE with PUT method"
			},
			"response": []
		},

## ---------- DELETE AN ENTITY
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 204 or 404",
							"tests[\"Status code is 204 or 404\"] = ( responseCode.code === 204 || responseCode.code === 404 ) ;",
							"",

							"// No body in the response (in any case) ",
							"tests[\"No body in response\"] = ( ! responseBody ) ;",
							"",

							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName/$requestIdParams",
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": "DELETE with DELETE method"
			},
			"response": []
		}

##==========================================================================================================
## ---------- COUNT 
#*
		{
			"name": "Count all $uncapitalizedEntityName",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
							"        tests[\"Returned value count is an integer\"] = Number.isInteger(jsonData.count);",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName/count",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "Count all $uncapitalizedEntityName"
			},
			"response": []
		}
*#
	]
}